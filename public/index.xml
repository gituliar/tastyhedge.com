<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TastyHedge</title>
    <link>https://tastyhedge.com/</link>
    <description>Recent content on TastyHedge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://tastyhedge.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory Layout of std::string</title>
      <link>https://tastyhedge.com/blog/memory-layout-of-std-string/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://tastyhedge.com/blog/memory-layout-of-std-string/</guid>
      <description>For a professional C++ developer, it&amp;rsquo;s important to understand memory organization of the data structures, especially when it comes to the containers from the C++ Standard Library. In this post of Tasty C++ series we&amp;rsquo;ll look inside of std::string, so that you can more effectively work with C++ strings and take advantage and avoid pitfalls of the C++ Standard Library you are using.&#xA;In C++ Standard Library, std::string is one of the three contiguous containers (together with std::array and std::vector).</description>
    </item>
    <item>
      <title></title>
      <link>https://tastyhedge.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tastyhedge.com/about/</guid>
      <description>about.md </description>
    </item>
  </channel>
</rss>
